1.1-1
Describe your own real-world example that requires sorting. Describe one that requires finding the shortest distance between two points.
  - Given a population of varied earnings, sorting would be convenient to more easily section in different tax brackets.
  - Given an ISP, when providing service to a household, it's necessary to know the shortest distance between the house's location and the ISP's Points of Presence in order to find the nearest PoP.

1.1-2
Other than speed, what other measures of efficiency might you need to consider in a real-world setting?
  - Resource efficiency, data criticality and its correct management, scalability, etc.

1.1-3
Select a data structure that you have seen, and discuss its strengths and limitations.
  - Linked lists
    > Strenghts
      . Easy to understand
      . Memory-efficient
      . Fairly easy to sort its data
    > Limitations
      . Slow to find data the bigger the list
      . Due to the above, slow to delete data the bigger the list

1.1-4
How are the shortest-path and traveling-salesperson problems given above similar? How are they different?
  - They are similar in that they intend to find the shortest travel distance, given their different contexts. They are different in that the traveling-salesperson problem is NP-complete, whereas the shortest-path problem is not.

1.1-5
Suggest a real-world problem in which only the best solution will do. Then come up with one in which "approximately" the best solution is good enough.
  - For automated driving assistants, it is imperative that they're optimized in order to avoid accidents.
  - For route finders, finding the very best solution is not necessary as long as the route found is pretty good, where the meaning of good varies with context.

1.1-6
Describe a real-world problem in which sometimes the entire input is available before you need to solve the problem, but other times the input is not entirely available in advance and arrives over time.
  - Given an app that finds the lowest price amongst a set of websites, the app is fed the list of websites, so it can scrape the prices, and then compare; in this sense, the app is working with all of its input available, even if it has to work for it.
  - Operating systems exist in constant uncertainty of coming processes, so their task managers must use algorithms that efficiently execute any process even if the process just came in; in this sense, the input for task managers is always changing, and comes over time.

1.2-1
Give an example of an application that requires algorithmic content at the application level, and discuss the function of the algorithms involved.
  - Mostly anything found in a video game requires algorithms. An example of this is an algorithm to render and de-render textures and models in a way that visual fidelity isn't compromised by resource-management efficiency; what's the most efficient way to make the game look good, while not having the machine blow up?

1.2-2
Suppose that for inputs of size n on a particular computer, insertion sort runs in 8n^2 steps and merge sort runs in 64nlg(n) steps. For which values of n does insertion sort beat merge sort?
  - For small values; assuming n is an integer, 6 or lower.

1.2-3
What is the smallest value of n such that an algorithm whose running time is 100n^2 runs faster than an algorithm whose running time is 2^n on the same machine?
  - Assuming n is an integer, 15.

PROBLEMS
1-1
For each function f(n), and time t, determine the largest size of n that can be solved in time t, assuming the algorithm to solve the problem takes f(n) microseconds.


-> Solution process:
  given an f(n), find the biggest n such that f(n) <= t; t in microseconds
    1 second = 1 million microseconds
    1 minute = 60 million microseconds
    and so on

      | 1 second      | 1 minute         | 1 hour | 1 day | 1 month | 1 year | 1 century
========================================================================================
 lg(n)| 2^1000000     | 2^60000000       | ...
 sq(n)| 1x10^12       | 6x10^14          | ...
    n | 1000000       | 60000000         | ...
nlg(n)| 1385          | 2000000          | ...
   n^2| 1000          | 2000sq(15)       | ...
   n^3| 100           | 100rt(3, 60)     | ...
   2^n| 6ln(10)/ln(2) | ln(6x10^6)/ln(2) | ...
    n!| 9             | 10               | ...
